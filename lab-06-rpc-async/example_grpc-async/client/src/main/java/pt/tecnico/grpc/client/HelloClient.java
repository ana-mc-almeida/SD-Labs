package pt.tecnico.grpc.client;

/* these imported classes are generated by the hello-world-server contract */
import pt.tecnico.grpc.HelloWorld;
import pt.tecnico.grpc.HelloWorldServiceGrpc;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;

public class HelloClient {

	public static void main(String[] args) throws Exception {
		System.out.println(HelloClient.class.getSimpleName());

		// receive and print arguments
		System.out.printf("Received %d arguments%n", args.length);
		for (int i = 0; i < args.length; i++) {
			System.out.printf("arg[%d] = %s%n", i, args[i]);
		}

		// check arguments
		if (args.length < 2) {
			System.err.println("Argument(s) missing!");
			System.err.printf("Usage: java %s host port%n", HelloClient.class.getName());
			return;
		}

		ResponseCollector collector = new ResponseCollector();

		final String host = args[0];
		final int port = Integer.parseInt(args[1]);
		final String target = host + ":" + port;

		// Channel is the abstraction to connect to a service endpoint
		// Let us use plaintext communication because we do not have certificates
		final ManagedChannel channel = ManagedChannelBuilder.forTarget(target).usePlaintext().build();

		// It is up to the client to determine whether to block the call
		// Here we create an async stub
		HelloWorldServiceGrpc.HelloWorldServiceStub stub = HelloWorldServiceGrpc.newStub(channel);
		HelloWorld.HelloRequest request = HelloWorld.HelloRequest.newBuilder().setName("Alice").build();

		// SERVER 2 
		final String host2 = host;
		final int port2 = port + 1;
		final String target2 = host2 + ":" + port2;

		// Channel is the abstraction to connect to a service endpoint
		// Let us use plaintext communication because we do not have certificates
		final ManagedChannel channel2 = ManagedChannelBuilder.forTarget(target2).usePlaintext().build();

		// It is up to the client to determine whether to block the call
		// Here we create an async stub
		HelloWorldServiceGrpc.HelloWorldServiceStub stub2 = HelloWorldServiceGrpc.newStub(channel2);
		HelloWorld.HelloRequest request2 = HelloWorld.HelloRequest.newBuilder().setName("Bob").build();

		// Finally, make the call using the stub
		stub.greeting(request, new HelloObserver<HelloWorld.HelloResponse>(collector));
		stub2.greeting(request2, new HelloObserver<HelloWorld.HelloResponse>(collector));

		collector.waitUntilAllReceived(2);
		System.out.println("Printing all the responses:");
		for(String response : collector.getResponses()){
			System.out.println(response);
		}

		System.out.println("Shutting down");

		// A Channel should be shutdown before stopping the process
		// We can't use shutdownNow as it will cancel the asynchronous call
		channel.shutdown();
		channel2.shutdown();
	}

}
